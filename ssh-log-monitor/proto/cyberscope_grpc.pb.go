// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/cyberscope.proto

package logs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogService_SendLinuxLog_FullMethodName   = "/LogService/SendLinuxLog"
	LogService_SendWindowsLog_FullMethodName = "/LogService/SendWindowsLog"
)

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	SendLinuxLog(ctx context.Context, in *LinuxLogRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	SendWindowsLog(ctx context.Context, in *WindowsLogRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) SendLinuxLog(ctx context.Context, in *LinuxLogRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, LogService_SendLinuxLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) SendWindowsLog(ctx context.Context, in *WindowsLogRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, LogService_SendWindowsLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility.
type LogServiceServer interface {
	SendLinuxLog(context.Context, *LinuxLogRequest) (*StatusResponse, error)
	SendWindowsLog(context.Context, *WindowsLogRequest) (*StatusResponse, error)
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogServiceServer struct{}

func (UnimplementedLogServiceServer) SendLinuxLog(context.Context, *LinuxLogRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLinuxLog not implemented")
}
func (UnimplementedLogServiceServer) SendWindowsLog(context.Context, *WindowsLogRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWindowsLog not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}
func (UnimplementedLogServiceServer) testEmbeddedByValue()                    {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_SendLinuxLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinuxLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SendLinuxLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_SendLinuxLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SendLinuxLog(ctx, req.(*LinuxLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_SendWindowsLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowsLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SendWindowsLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_SendWindowsLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SendWindowsLog(ctx, req.(*WindowsLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLinuxLog",
			Handler:    _LogService_SendLinuxLog_Handler,
		},
		{
			MethodName: "SendWindowsLog",
			Handler:    _LogService_SendWindowsLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cyberscope.proto",
}

const (
	PacketService_SendPacket_FullMethodName = "/PacketService/SendPacket"
)

// PacketServiceClient is the client API for PacketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketServiceClient interface {
	SendPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type packetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketServiceClient(cc grpc.ClientConnInterface) PacketServiceClient {
	return &packetServiceClient{cc}
}

func (c *packetServiceClient) SendPacket(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PacketService_SendPacket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketServiceServer is the server API for PacketService service.
// All implementations must embed UnimplementedPacketServiceServer
// for forward compatibility.
type PacketServiceServer interface {
	SendPacket(context.Context, *PacketRequest) (*StatusResponse, error)
	mustEmbedUnimplementedPacketServiceServer()
}

// UnimplementedPacketServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPacketServiceServer struct{}

func (UnimplementedPacketServiceServer) SendPacket(context.Context, *PacketRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPacket not implemented")
}
func (UnimplementedPacketServiceServer) mustEmbedUnimplementedPacketServiceServer() {}
func (UnimplementedPacketServiceServer) testEmbeddedByValue()                       {}

// UnsafePacketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketServiceServer will
// result in compilation errors.
type UnsafePacketServiceServer interface {
	mustEmbedUnimplementedPacketServiceServer()
}

func RegisterPacketServiceServer(s grpc.ServiceRegistrar, srv PacketServiceServer) {
	// If the following call pancis, it indicates UnimplementedPacketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PacketService_ServiceDesc, srv)
}

func _PacketService_SendPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).SendPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PacketService_SendPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).SendPacket(ctx, req.(*PacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PacketService_ServiceDesc is the grpc.ServiceDesc for PacketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PacketService",
	HandlerType: (*PacketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPacket",
			Handler:    _PacketService_SendPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cyberscope.proto",
}
